
# This script builds the zip file that is the working release build put out on the GitHub page.

# Remove any existing jars so that we get a clean build.
rm lib/code_generator.jar
rm lib/coreutil.jar


# Build CoreUtils
pushd ../CoreUtils

source java_build clean
source java_build

popd


# Copy the coreutil jar into this project so it will build.
mkdir lib
cp -pL  ../CoreUtils/lib/*.* ./lib


# Build the code generator java code.
source java_build clean
source java_build



# Create the temp zip directory, fill it and then zip it up.
mkdir zip
mkdir zip/code_generator
mkdir zip/code_generator/examples
mkdir zip/code_generator/lib
mkdir zip/code_generator/logs


cp -prL Examples/*				zip/code_generator/examples
cp -pL  ../CoreUtils/lib/*.*	zip/code_generator/lib
cp -pL  lib/*.*					zip/code_generator/lib
cp -pL  CodeGeneratorConfig.xml zip/code_generator
cp -pL  generate				zip/code_generator
cp -pL  generate.cmd			zip/code_generator
cp -pL  RELEASE					zip/code_generator


# The zip folder should be completely populated at this point so we are now ready to create the zip file from it.
rm code_generator.zip

pushd zip
zip -r ../code_generator.zip *
popd




# Clean everything up.
rm -fr zip

rm lib/*.jar


# Clean up CoreUtils
pushd ../CoreUtils
source java_build clean
popd

# Finally, clean this build dir.
source java_build clean



