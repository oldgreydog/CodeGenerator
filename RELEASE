This contains important info about each release.

To run the code generator using the contents of the code_generator.zip file, extract the file into the folder of your choice.


1.5.1

	Change summary:
		a) Fix custom code handling so that it forces the custom code cache to be cleared when generating a file for the first time.
		b) Comment/documentation fix for CustomCodeBlock.

	Detailed change notes:
		a) I don't know how I haven't run into this bug in all of the years I've run this code.  I guess one reason is that I usually don't use generic
			custom code block key names (i.e. "Includes").  I usually include some config value in the name (i.e. "<%className$>Includes") so that every
			custom code block in the file has a key name that is unique to that file.  But I recently created a new template set where I didn't do that,
			so each generated file has (mostly) the same custom code key names.  That was fine with the first set of files I generated with those templates
			because since they were generated at the same time, there were no existing files that were read before them to polute the custom code manager's
			cache.  But when I finally added a new definition to the config to generate new files, the generator was now going through existing files before
			it got to creating the new ones.  That meant that the contents of the last existing file scanned were still in the custome code manager.  The
			custom code manager has always cleared its cache as the first thing it does before scanning an EXISTING file, but when the next file being generated
			doesn't exist, then as it was being generated and each custom code block was being evaluated, the code would find a match for the key in the custom
			code manager from the last file scanned.

			As you can see from the change, the fix was simple: I just needed to force a clearing of the manager's cache if the next file doesn't exist already.

1.5

	Build Change!!

		I've re-exposed the CoreUtils code but in a way that, unfortunately, changes how you need to build the code generator.  That code was originally
		just inside this repository but I eventually got to a point where I didn't think anyone would care about it, so I removed it and started just
		including the jar file.  Then when I was starting the v1.5 commits, I realized that if I compiled that jar locally where I usually run the latest
		OpenJDK (v14 at the moment), then people that can't run the latest jdk can't use it.  I shot myself in the foot with that one.

		I've been thinking about it and I decided that I needed to put that code back out here but that it should be in a separate repository since the
		config management and logger code it contains aren't restricted to the code generator.  To that end, you also need to clone the oldgreydog/CoreUtils
		repository into the same parent directory where you cloned CodeGenerator. If you don't want to pull both projects into your IDE of choice (Eclipse
		project files are included in the repositories), then use the build script

		./dev_build

		the first time to build the CoreUtils jar and have it added it to the CodeGenerator lib directory.  From that point on, you can can just use the
		CodeGenerator project and include the lib/coreutil.jar file.

		Or you can run the script

		./release_build

		if you want to create the release zip file that contains the "install" folder that you can then use to run the code generator.

		!!NOTE!! I noted here that I didn't think I would add a release build zip file to the GitHub releases anymore, but I've changed my mind again.
		I have added a zip that contains jar files compiled to java version 1.8 compatibility.  It looks like the current long-term support version of java
		is version 1.11, but I couldn't get a down-compile to anything after 1.8, so 1.8 it is.

		!!NOTE 2!!  I haven't had a windows machine in years and it just occurred to me that these scripts only cover Linux, which is a problem.  I'll try to
		borrow a windows laptop from somebody and use it to create/test the windows versions of these scripts.  I'll add them as soon as I can.  Sorry!



	Change summary:
		!!!NOTE!!! b) below may break your existing templates!  See the detailed notes for b) below for any text replacements that you will need to do.

		a) File tags can now be nested inside another file template.
		b) The naming of tag attributes and/or using camel-case in names has been made more consistent.
		c) For another project, I added an "exception" log level and I decided to normalize the exception logging across all my code to use it.
		d) Cleaned up all TemplateBlock_Base subclasses to properly call the super.Init() in their Init() functions.  This mainly to set the line
			number where the tag was found.
		e) Used the d) line number in more error messages to help in finding where the erroneous tag started.
		f) I added a CounterVariable tag and a ++counter (CounterIncrement) tag.

	Detailed change notes:

	a) I needed to be able to nest a file tag inside a template.  You may never need this, but I came to a point working on a template
		for some database code where I wanted to only generate a certain file if the table had a foreign key or other parent-child relationship
		to another table.  I didn't want to add a bunch of crap to the root template to do this.  Instead I felt like it made more sense to
		put the file tag inside a specific template that was already detecting the case where I needed it.

		But nesting the file tag would mean some changes had to be made to manage the state being passed down through the parameters to the
		Evaluate() function.  Most of the changes revolved around the fact that certain things like the custom code manager, outer context manager and
		tab settings had been done as singletons, which worked just fine before nesting was possible.  But with nesting, they have to be managed as separate
		objects for the state of each file object evaluation.  Instead of just adding more and more parameters to Evaluate(), I just created a
		"context" object and made that the only parameter for Evaluate().  Then I could add/manage/remove any values inside that context object in
		any way I needed without having to mess with the parameter list for Evaluate() ever again.

	b) I realized there might be a few places where I hadn't been consistent in naming tag attributes and/or using camel-case
		in names.  I've tried to take a stab at cleaning that up, but be warned, THIS MAY BREAK YOUR EXISTING TEMPLATES!  Sorry!
		There are two groups of changes here:
			- I decided that I needed to uniformly use the prefix "optional" on all optional tag attributes.  I feel like that makes it easier for
				users (and me) to know which tags have to be used and which ones they can skip if they don't need them.  This change is definitely a template
				breaker.  I've listed the changed one below so that it should be easier for you to do find/replace to fix your templates.
			- I also found a few places I wasn't consistently using camel case on some of the attribute names.  I changed them in the code and my templates,
				but I also made sure the TagParser treats them as case-insensitive which should mean that you can do camel-case or not.  This should not
				break your templates.

		Here are the values that you need to find/replace (Turned out that, on doing the checkin, only one attribute name got changed.  All of the others
		had been done that way when they were first added.) :
			- in CustomCodeBlock tags: closingCommentCharacters -> optionalClosingCommentCharacters

		I also changed BlockFactory so that it doesn't care what case you use for your tag names.

	f) In using the new OuterContext tags, I came across a need to have something only generated once inside all of the nested contexts and foreach
		loops, so I added a CounterVariable tag (not particularly happy with the name, but I couldn't think of a better one at the time to differentiate it
		from counter).  To manipulate the counter's value, I also added a ++counter (CounterIncrement) tag.  The --counter tag and counter tags already existed
		so I just had to make everything work with the CounterVariables.  I also had a separate need to use the counter of an outer forEach inside
		a child foreach, so I also added an optional name attribute to the forEach and first tags.  By adding an optional name attribute to --counter and counter, it
		is now possible to work with multiple counters in a nested context to get exactly the result you need.


1.4

	Change summary:
		This release has a few changes, some of which will potentially break existing templates.

		a) Added the OuterContext tags:
			- outerContext
			- outerContextEval
		b) The outerContext tags required changes to the tag attribute parser and forEach tag.
		c) Moved the initialization of the DataTypeManager from the executable's config file to a new tag:
			- typeConvertLoadFile
		c) Global config value references now require the prefix "root.".
			- i.e. an old global value reference such as <%global.outputPath%> needs to be changed to <%root.global.outputPath%>
		e) Counters now can be given optional names so that they can be referenced inside nested forEach loops. This affects the following tags:
			- counter
			- --counter
			- forEach
			- first
		f) Improved release zip file.

	Detailed change notes:

	a) The outer context tags are such special-case tags that you may never find a use for them.  I have a certain type of
		relationship between database tables that I define in my config value files and I wanted to use that relationship info
		to generate deletions in my cached DAO's.  But to do that, I needed to be able to jump a forEach to a node ABOVE the current
		one the template was pointing at in the config values tree.  And I needed to be able to reference values from both contexts in the
		template code inside the forEach that was pointed outside the parent forEach.  That's where the outer context tags come in.

		There are two tags.  The first is "outerContext".  This one is used to basically set a virtual maker in the loops to grab the
		node context wherever it is placed in the template.

		<%outerContext contextname = parentTable  optionalJumpToParentContext = "^^" %>

		The second tag is "outerContextEval".  This one is used inside the inner forEach loop(s) so that you can access a value that's
		in the outer node context held by the "OuterContext" tag.

		<%outerContextEval contextname = parentTable targetvalue = sqlName %>

		There are two ways to take advantage of this new functionality.  The forEach tag's "node" attribute can now take the parent reference characters ("^")
		in its value.  That will jump the context up one parent node per carret and then execute the forEach loop from that context.  The other way is to use
		the optionalJumpToParentContext attribute on the outerContext tag to jump the context up.  That option is discussed below.

		Here's an abbreviated example of the usage of these tags (the 1., 2., 3. and 4. are for reference in the explanation below):


		< At this point in the template, we are inside a <%foreach node = "table" %> tag, so the current
			node context is pointing to a particular "table" node >

			<%outerContext contextname = "parentTable" %>

		.1		<%foreach node = "^table"  optionalCounterName = "innerTable" %>

		.2			<%foreach node = column %>

						<%foreach node = foreignKey %>

		.3					<%if <%and <%parentTableName%> = <%outerContextEval contextname = "parentTable" targetvalue = sqlName %>
										<%not <%parentTableName%> = <%^^sqlName%> %> == true %> == true %>

								<%text%>...<%endtext%>

							<%endif%>

						<%endfor%>

					<%endfor%>

					<%foreach node = tableRelationship %>

						<%if <%and <%parentTableName%> = <%outerContextEval contextname = "parentTable" targetvalue = sqlName %>
									<%not <%parentTableName%> = <%^sqlName%> %> == true %> == true %>

		.4					<%first  optionalCounterName = "innerTable" %>

								<%text%>...<%endtext%>

							<%endfirst%>

								<%text%>...<%endtext%>

						<%endif%>

					<%endfor%>

				<%endfor%>

			<%endcontext%>

		Once the outerContext tag is hit, you can then jump the node pointer to a different context with a forEach as shown at 1.
		Since that forEach's node attribute value is "^table", that tells the forEach to jump up ("^") one parent (which is the "root"
		node in my database config values file) and start iterating over the "table" nodes under that parent.

		!!It is super important to note that now that we are inside the new parent context at 1., all node and value references inside
		that forEach (i.e. 2.) are in that context, so you don't have to use the "^" with them!!

		3. shows how to use outerContextEval to access a value in the outer context from inside the new inner context.

		This example also shows one possible usage (4.) of the "optionalCounterName" discussed in e).

		Now let's go back to the optionalJumpToParentContext attribute on the outerContext tag.  The driver
		for adding this attribute was that I had one or more files that I only wanted to generate once based on a flag value used on my
		API config.  To do that, I needed to be able to jump the parent context up some number of levels without being forced to use a
		forEach loop.  An inner forEach would make it impossible to generate the file since the file template needs
		to do the forEach internally to generate its content but you would be in the wrong context to do that.

		Here's an example of this usage:

		<%foreach node=manager%>
			<%file template=manager.template						filename="<%className%>Manager.java"				destDir="<%root.global.outputPath%>/<%firstLetterToLowerCase value = <%className%> %>" %>

			<%foreach node=api%>
				<%file template=manager_net_client.template		filename="<%apiName%>_NET.java"						destDir="<%root.global.outputPath%>/<%firstLetterToLowerCase value = <%^className%> %>" %>
				<%file template=manager_net_server.template		filename="<%apiName%>_NET_Server.java"				destDir="<%root.global.outputPath%>/<%firstLetterToLowerCase value = <%^className%> %>" %>
			<%endfor%>

			<%if <%accessType%> = "transparent" %>
				<%file template=manager_interface.template		filename = "<%className%>Manager_Interface.java"		destDir = "<%root.global.outputPath%>/<%firstLetterToLowerCase value = <%className%> %>" %>

				<%first%>
					<%outerContext contextname = root  optionalJumpToParentContext = "^" %>
						<%file template=manager_factory.template				filename = "<%root.global.serviceGroupName%>ManagerFactory.java"		destDir = "<%root.global.outputPath%>/factory" %>
						<%file template=manager_factory_config.template		filename = "<%root.global.serviceGroupName%>ManagerFactoryConfig.xml"	destDir = "<%root.global.outputPath%>/factory" %>
					<%endcontext%>
				<%endFirst%>
			<%endif%>
		<%endfor%><


	b) The outer context tags required that I make the tag attribute parser a little more flexible.  The down side is that it potentially
		breaks existing templates a little.  Any tags attributes that have tags in their values are now required to have double quotes around
		them.  For example, this tag was fine before:

		<%file template=ddl.template filename=<%root.global.databaseName%>.ddl destDir=<%root.global.outputPath%>/ddl %>

		It now has to have quotes:

		<%file template=ddl.template filename="<%root.global.databaseName%>.ddl" destDir="<%root.global.outputPath%>/ddl" %>

		Note that the "template" attribute doesn't have an embedded tag in its value so that value doesn't have to have quotes.

		The other change was in the forEach tag.  Its "node" attribute value now allows you to use the parent reference character: "^"
		As explained for line 1. in section a) above, this is how you jump the context out to a parent level.


	c) I was never happy with the way I originally set up the DataTypeManager initialization.  I decided to fix that, so now there is a
		typeConvertLoadFile tag to do the job.  Most of the time, you'll put this tag in the root template file since most, if not all,
		of the file templates in that set will use the same type conversion config file.  But you can put the tag in any individual
		template file if only that file needs that type conversion (although technically, the tag only needs to be used once and any
		template file that happens to get executed after the tag can use that conversion).

	e) Until now, the counter mechanism was always sort of hidden under the forEach block.  Each new forEach creates a new counter for
		its context and passes that in the Evaluate() of its child templates.  If you were in a nested forEach, then you couldn't access
		the counter in any of the outer contexts, but by adding the "optionalCounterName" attribute to the relevant tags, you can now
		name the counter for one or more of the forEach blocks and then access it even in nested forEach loops.


	f) I really have to apologize for not doing a better job with the release zip file(s) originally.  I didn't provide a runnable
		environment that you could use right out of the box.  I think I have corrected that.  Now the code_generator.zip can be
		extracted in folder and you can use the generate/generate.cmd batch files (one for Linux, the other for Windows) to run the
		generator.  I included the examples in that zip file, but the javadocs are still separate.




1.3

	The big change for this release was that I removed the code for the config manager and logging that are used in the
	code generator.  I thought about it for a long time and I just didn't think that anyone would ever care about that code.
